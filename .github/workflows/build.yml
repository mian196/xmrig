name: Build XMRig for Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Visual Studio
      uses: microsoft/setup-msbuild@v2
      
    - name: Install CMake
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        
    - name: Get latest XMRig dependencies version
      id: get-deps-version
      run: |
        # Get the latest release tag from xmrig-deps repository
        $response = Invoke-RestMethod -Uri "https://api.github.com/repos/xmrig/xmrig-deps/releases/latest"
        $latestTag = $response.tag_name
        $zipballUrl = $response.zipball_url
        Write-Host "Latest xmrig-deps version: $latestTag"
        Write-Host "Download URL: $zipballUrl"
        # Set output for next step
        echo "version=$latestTag" >> $env:GITHUB_OUTPUT
        echo "download-url=$zipballUrl" >> $env:GITHUB_OUTPUT
        
    - name: Download XMRig dependencies
      run: |
        # Download the latest XMRig dependencies using GitHub's zipball URL
        $downloadUrl = "${{ steps.get-deps-version.outputs.download-url }}"
        $version = "${{ steps.get-deps-version.outputs.version }}"
        Write-Host "Downloading dependencies from: $downloadUrl"
        Write-Host "Version: $version"
        
        Invoke-WebRequest -Uri $downloadUrl -OutFile "xmrig-deps.zip"
        Expand-Archive -Path "xmrig-deps.zip" -DestinationPath "C:\"
        
        # Find the extracted folder (GitHub zipball creates a folder like xmrig-xmrig-deps-abc1234)
        $extractedFolder = Get-ChildItem -Path "C:\" -Directory -Filter "xmrig-xmrig-deps-*" | Select-Object -First 1
        if ($extractedFolder) {
            Write-Host "Found extracted folder: $($extractedFolder.Name)"
            Rename-Item -Path $extractedFolder.FullName -NewName "xmrig-deps"
            Write-Host "Renamed to: xmrig-deps"
        } else {
            Write-Host "Could not find extracted folder, listing C:\ contents:"
            Get-ChildItem -Path "C:\" -Directory | Where-Object {$_.Name -like "*xmrig*" -or $_.Name -like "*deps*"} | Select-Object Name
            # Fallback: try the old naming convention
            $fallbackFolder = "C:\xmrig-deps-$($version.TrimStart('v'))"
            if (Test-Path $fallbackFolder) {
                Rename-Item -Path $fallbackFolder -NewName "xmrig-deps"
            }
        }
        
        Write-Host "Downloaded and extracted xmrig-deps version: $version"
        # Verify the structure and show what's inside
        Write-Host "Dependencies structure:"
        Get-ChildItem -Path "C:\xmrig-deps" -Recurse | Select-Object FullName
        # Check for WinRing0x64.sys and other important files
        Write-Host "Looking for driver files:"
        Get-ChildItem -Path "C:\xmrig-deps" -Recurse -Filter "*.sys" | Select-Object FullName
        Write-Host "MSVC2022 x64 contents:"
        Get-ChildItem -Path "C:\xmrig-deps\msvc2022\x64" -Recurse | Select-Object FullName
        
    - name: Build XMRig
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DXMRIG_DEPS=C:\xmrig-deps\msvc2022\x64
        cmake --build . --config Release
        
    - name: List build output
      run: |
        Write-Host "Build output structure:"
        Get-ChildItem -Path "build" -Recurse | Select-Object FullName
        Write-Host "Looking for executables and drivers:"
        Get-ChildItem -Path "build" -Recurse -Include "*.exe", "*.sys", "*.dll" | Select-Object FullName
        
    - name: Copy WinRing0 driver to build output
      run: |
        # Copy the WinRing0x64.sys driver to the build output directory
        $driverSource = Get-ChildItem -Path "C:\xmrig-deps" -Recurse -Filter "WinRing0x64.sys" | Select-Object -First 1
        if ($driverSource) {
            Write-Host "Found WinRing0x64.sys at: $($driverSource.FullName)"
            Copy-Item -Path $driverSource.FullName -Destination "build\Release\" -Force
            Write-Host "Copied WinRing0x64.sys to build output"
        } else {
            Write-Host "WinRing0x64.sys not found in dependencies"
        }
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: xmrig-win-x64
        path: |
          build/Release/xmrig.exe
          build/Release/WinRing0x64.sys
